/**
 * codealpine api
 * The codealpine API description
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ClimbingQuestionnaire } from '../model/climbingQuestionnaire';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ClimbingQuestionnaireService {

    protected basePath = 'http://localhost:3045';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param withQuestions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public climbingQuestionnaireControllerFindAll(withQuestions: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ClimbingQuestionnaire>>;
    public climbingQuestionnaireControllerFindAll(withQuestions: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ClimbingQuestionnaire>>>;
    public climbingQuestionnaireControllerFindAll(withQuestions: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ClimbingQuestionnaire>>>;
    public climbingQuestionnaireControllerFindAll(withQuestions: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (withQuestions === null || withQuestions === undefined) {
            throw new Error('Required parameter withQuestions was null or undefined when calling climbingQuestionnaireControllerFindAll.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ClimbingQuestionnaire>>('get',`${this.basePath}/api/v1/climbing-questionnaire/all/${encodeURIComponent(String(withQuestions))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public climbingQuestionnaireControllerFindForUser(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ClimbingQuestionnaire>>;
    public climbingQuestionnaireControllerFindForUser(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ClimbingQuestionnaire>>>;
    public climbingQuestionnaireControllerFindForUser(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ClimbingQuestionnaire>>>;
    public climbingQuestionnaireControllerFindForUser(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling climbingQuestionnaireControllerFindForUser.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ClimbingQuestionnaire>>('get',`${this.basePath}/api/v1/climbing-questionnaire/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param withQuestions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, observe?: 'body', reportProgress?: boolean): Observable<ClimbingQuestionnaire>;
    public climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ClimbingQuestionnaire>>;
    public climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ClimbingQuestionnaire>>;
    public climbingQuestionnaireControllerFindOne(id: string, withQuestions: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling climbingQuestionnaireControllerFindOne.');
        }

        if (withQuestions === null || withQuestions === undefined) {
            throw new Error('Required parameter withQuestions was null or undefined when calling climbingQuestionnaireControllerFindOne.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ClimbingQuestionnaire>('get',`${this.basePath}/api/v1/climbing-questionnaire/${encodeURIComponent(String(id))}/${encodeURIComponent(String(withQuestions))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param questionnaire 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public climbingQuestionnaireControllerGetAnalysisMessage(questionnaire: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionnaire === null || questionnaire === undefined) {
            throw new Error('Required parameter questionnaire was null or undefined when calling climbingQuestionnaireControllerGetAnalysisMessage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/v1/climbing-questionnaire/analysis/${encodeURIComponent(String(questionnaire))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public climbingQuestionnaireControllerSaveUserQuestionnaire(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling climbingQuestionnaireControllerSaveUserQuestionnaire.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/v1/climbing-questionnaire/save-answers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
